---
import VideoCarousel from './VideoCarousel.astro';

const timelinePoints = [
  { 
    date: 'December 2023',
    active: false,
    images: [
      '/images/project-progress/dec2023/1.jpg',
      '/images/project-progress/dec2023/2.jpg',
      '/images/project-progress/dec2023/3.jpg',
      '/images/project-progress/dec2023/4.jpg',
      '/images/project-progress/dec2023/5.jpg',
      '/images/project-progress/dec2023/6.jpg',
      '/images/project-progress/dec2023/7.jpg',
      '/images/project-progress/dec2023/8.jpg',
      '/images/project-progress/dec2023/9.jpg',
      '/images/project-progress/dec2023/10.jpg',
      '/images/project-progress/dec2023/11.jpg',
      '/images/project-progress/dec2023/12.jpg',
      '/images/project-progress/dec2023/13.jpg',
      '/images/project-progress/dec2023/14.jpg',
      '/images/project-progress/dec2023/15.jpg',
      '/images/project-progress/dec2023/16.jpg',
    ]
  },
  { 
    date: 'May 2024',
    active: false,
    images: [
      '/images/project-progress/may2023/1.jpg', 
      '/images/project-progress/may2023/2.jpg',
      '/images/project-progress/may2023/3.jpg',
      '/images/project-progress/may2023/4.jpg',
    ]
  },
  { 
    date: 'July 2024',
    active: false,
    images: [
      '/images/project-progress/july2023/1.jpg',
      '/images/project-progress/july2023/2.jpg',
      '/images/project-progress/july2023/3.jpg',
    ]
  },
  { 
    date: 'October 2024',
    active: true,
    images: [
      '/images/project-progress/oct2023/1.jpg',
      '/images/project-progress/oct2023/2.jpg',
      '/images/project-progress/oct2023/3.jpg',
    ]
  },
];
---

<section id="highlights" class="common-padding bg-zinc h-full w-screen overflow-hidden">
  <section class="bg-darkColor lg:px-4 py-40 text-white">
    <h2 class="project-head mb-16 text-center font-medium tracking-[0.78rem]">PROJECT PROGRESS</h2>

    <!-- Timeline Container -->
    <div class="containerw lg:mx-auto my-16 lg:my-24 pt-10">
      <!-- Timeline Bar -->
      <div class="relative">
        <!-- Timeline Line -->
        <div class="containerw">
          <div class="absolute left-0 top-[6px] h-[6px] w-[89%] bg-gradient-to-r from-transparent via-white/20 to-white/5"></div>
        </div>

        <!-- Timeline Points -->
        <div class="relative flex justify-around md:gap-[8rem] lg:gap-[5rem]">
          {
            timelinePoints.map(({ date, active }, index) => (
              <div class="flex cursor-pointer flex-col items-center text-center" data-tab={index}>
                <div
                  class={`timeline-point z-10 mb-2 h-7 w-7 cursor-pointer rounded-full border-2 transition-all hover:shadow-[0px_0px_2px_11px_rgba(255,255,255,0.25)] ${
                    active ? 'bg-white shadow-[0px_0px_2px_11px_rgba(255,255,255,0.25)]' : 'bg-white/40 border-white/10'
                  }`}
                  data-tab={index}
                />
                <span class={`lg:text-[3.2rem] mt-10 font-medium ${active ? 'text-white' : 'text-white/30'}`}>{date}</span>
              </div>
            ))
          }
        </div>
      </div>
    </div>

    <!-- Grid Container -->
    {
      timelinePoints.map(({ images, active }, index) => (
        <div class={`containerw lg:mx-auto grid grid-cols-1 gap-10 md:grid-cols-3 progress-content ${active ? 'block' : 'hidden'}`} data-content={index}>
          {images.map((imgSrc, imgIndex) => (
            <div 
              class="text-gray-400 flex min-h-[15rem] lg:min-h-[24rem] 3lg:min-h-[30rem] items-center justify-center rounded-2xl w-full bg-white/10 font24 relative overflow-hidden cursor-pointer"
              onclick={`window.openImageModal(this)`}
              data-image={imgSrc}
              data-index={imgIndex}
            >
              <img 
                src={imgSrc} 
                alt={`Construction Progress Image ${imgIndex + 1}`} 
                class="w-full h-full object-cover absolute top-0 left-0" 
                loading="lazy"
              />
            </div>
          ))}
        </div>
      ))
    }
  </section>
</section>

<div id="imageModal" class="fixed inset-0 z-50 hidden bg-black/90">
  <!-- Top Bar with Counter and Controls -->
  <div class="flex justify-between items-center p-4 text-white absolute top-0 left-0 right-0 z-10">
    <!-- Image Counter -->
    <span id="imageCounter" class="text-lg font-medium"></span>
    
    <!-- Control Buttons -->
    <div class="flex gap-4">
      <button id="fullscreenBtn" class="hover:text-gray-300">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-5h-4m4 0v4m0 0l-5-5m-7 11h4m-4 0v4m0 0l5-5m5 5v-4m0 4h-4m0 0l-5-5"/>
        </svg>
      </button>
      <button id="zoomInBtn" class="hover:text-gray-300">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v6m3-3H7"/>
        </svg>
      </button>
      <button id="zoomOutBtn" class="hover:text-gray-300">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM7 10h6"/>
        </svg>
      </button>
      <button id="downloadBtn" class="hover:text-gray-300">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"/>
        </svg>
      </button>
      <button id="closeModal" class="hover:text-gray-300">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
  </div>

  <!-- Navigation Arrows -->
  <button id="prevImage" class="absolute left-4 top-1/2 -translate-y-1/2 text-white hover:text-gray-300">
    <svg class="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
    </svg>
  </button>
  <button id="nextImage" class="absolute right-4 top-1/2 -translate-y-1/2 text-white hover:text-gray-300">
    <svg class="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
    </svg>
  </button>

  <!-- Main Image -->
  <div class="absolute inset-0 flex items-center justify-center p-10">
    <img id="modalImage" src="" alt="" class="max-h-full max-w-full object-contain" />
  </div>
</div>

<script>
  import { gsap } from 'gsap';

  // Timeline points click handling
  const timelinePoints = document.querySelectorAll('.timeline-point');
  const progressContents = document.querySelectorAll('.progress-content');

  timelinePoints.forEach(point => {
    point.addEventListener('click', () => {
      const tabIndex = point.dataset.tab;
      
      // Update timeline points
      timelinePoints.forEach(p => {
        p.classList.remove('bg-white', 'shadow-[0px_0px_2px_11px_rgba(255,255,255,0.25)]');
        p.classList.add('bg-white/40', 'border-white/10');
        p.parentElement.querySelector('span').classList.remove('text-white');
        p.parentElement.querySelector('span').classList.add('text-white/30');
      });
      
      point.classList.add('bg-white', 'shadow-[0px_0px_2px_11px_rgba(255,255,255,0.25)]');
      point.classList.remove('bg-white/40', 'border-white/10');
      point.parentElement.querySelector('span').classList.add('text-white');
      point.parentElement.querySelector('span').classList.remove('text-white/30');

      // Show corresponding content
      progressContents.forEach(content => {
        content.classList.add('hidden');
        if(content.dataset.content === tabIndex) {
          content.classList.remove('hidden');
        }
      });
    });
  });

  gsap.to('#title', {
    opacity: 1,
    y: 0,
    duration: 1,
    delay: 0.5,
  });

  gsap.to('.link', {
    opacity: 1,
    y: 0,
    duration: 1,
    delay: 1.5,
    stagger: 0.25,
  });

  // Image Modal Functionality
  let currentImageSet = [];
  let currentImageIndex = 0;
  
  window.openImageModal = function(element) {
    const modal = document.getElementById('imageModal');
    const modalImage = document.getElementById('modalImage');
    const imageCounter = document.getElementById('imageCounter');
    
    // Get current set of images from the active tab
    const activeContent = document.querySelector('.progress-content:not(.hidden)');
    const allImages = Array.from(activeContent.querySelectorAll('[data-image]')).map(el => el.dataset.image);
    const currentIndex = parseInt(element.dataset.index);
    
    modal.classList.remove('hidden');
    modalImage.src = element.dataset.image;
    imageCounter.textContent = `${(currentIndex + 1).toString().padStart(2, '0')}/${allImages.length.toString().padStart(2, '0')}`;

    // Setup navigation
    const prevImage = document.getElementById('prevImage');
    const nextImage = document.getElementById('nextImage');
    
    prevImage.onclick = () => {
      const newIndex = (currentIndex - 1 + allImages.length) % allImages.length;
      modalImage.src = allImages[newIndex];
      imageCounter.textContent = `${(newIndex + 1).toString().padStart(2, '0')}/${allImages.length}`;
    };

    nextImage.onclick = () => {
      const newIndex = (currentIndex + 1) % allImages.length;
      modalImage.src = allImages[newIndex];
      imageCounter.textContent = `${(newIndex + 1).toString().padStart(2, '0')}/${allImages.length}`;
    };

    // Setup control buttons
    document.getElementById('fullscreenBtn').onclick = () => {
      if (document.fullscreenElement) {
        document.exitFullscreen();
      } else {
        modalImage.requestFullscreen();
      }
    };

    document.getElementById('zoomInBtn').onclick = () => {
      const currentScale = modalImage.style.transform ? 
        parseFloat(modalImage.style.transform.replace('scale(', '').replace(')', '')) : 1;
      modalImage.style.transform = `scale(${Math.min(currentScale + 0.2, 3)})`;
    };

    document.getElementById('zoomOutBtn').onclick = () => {
      const currentScale = modalImage.style.transform ? 
        parseFloat(modalImage.style.transform.replace('scale(', '').replace(')', '')) : 1;
      modalImage.style.transform = `scale(${Math.max(currentScale - 0.2, 0.5)})`;
    };

    document.getElementById('downloadBtn').onclick = () => {
      const link = document.createElement('a');
      link.href = modalImage.src;
      link.download = `progress-image-${currentIndex + 1}.jpg`;
      link.click();
    };

    document.getElementById('closeModal').onclick = () => {
      modal.classList.add('hidden');
      modalImage.style.transform = 'scale(1)'; // Reset zoom
    };
  };
</script>

<style>
  .project-head {
    font-size: clamp(2.8rem, calc(4.1rem + (4.1 - 4.1) * ((100vw - 360px) / (1920 - 360))), 4.1rem);
  }
</style>

---
import ImageComp from './ImageComp.astro';

// Fetch projects from WordPress API
const response = await fetch('https://northernsky.auxcgen.com/wp-json/wp/v2/project');
const projects = await response.json();

// Transform WordPress data to match component structure
const transformedProjects = projects.map((project) => ({
  name: project.title.rendered,
  location: project.meta_box.location,
  image: project.meta_box.portfolio_media?.[0]?.url || '/placeholder-image.jpg',
  category: project.meta_box.projecttype?.slug || 'all',
  menu_order: project.menu_order || 0,
}));

// Sort projects by menu_order
transformedProjects.sort((a, b) => a.menu_order - b.menu_order);

// Get unique categories for filter buttons
const categories = ['all', ...new Set(transformedProjects.map((p) => p.category))];

// sort the

// Format category name for display
const formatCategoryName = (category) => category.charAt(0).toUpperCase() + category.slice(1).replace(/-/g, ' ');
---

<div class="mobile-menu-container lg:hidden">
  <div class="main-menu">
    <div class="z-30 h-[80dvh] bg-darkColor">
      <div class="mx-auto flex w-[90%] pt-12">
        <ul class="font32 flex w-full flex-col gap-y-6 font-thin text-white md:gap-y-8">
          <li class="bg-[#0E3B57] px-11 py-4">
            <button class="projects-button w-full text-left">Projects</button>
          </li>
          <li class="bg-[#0E3B57] px-11 py-4">
            <button class="about-button flex w-full items-center justify-between text-left">
              <span>About</span>
              <svg
                class="arrow-icon hidden transform transition-transform duration-300"
                xmlns="http://www.w3.org/2000/svg"
                width="1em"
                height="1em"
                viewBox="0 0 24 24"
              >
                <path fill="white" d="M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6l-6-6z"></path>
              </svg>
            </button>
            <div class="about-dropdown">
              <ul class="pb-6">
                <li class="pb-2"><a href="/about#corporate-profile">Corporate Profile</a></li>
                <li class="pb-2"><a href="/about#board-of-directors">Board of Directors</a></li>
                <li class="pb-2"><a href="/about#certifications">Certifications</a></li>
                <li class="pb-2"><a href="/about#social-initiatives">Social Initiatives</a></li>
              </ul>
            </div>
          </li>
          <li class="bg-[#0E3B57] px-11 py-4">Media</li>
        </ul>
      </div>
    </div>
  </div>

  <!-- Projects View -->
  <div class="projects-view hidden">
    <div class="min-h-[80dvh] bg-darkColor">
      <div class="mx-auto flex w-[90%] flex-col pt-12 text-white">
        <div class="font32">
          <button class="back-to-menu flex items-center">
            <svg class="" xmlns="http://www.w3.org/2000/svg" width="2em" height="1.2em" viewBox="0 0 24 24">
              <path
                fill="none"
                stroke="white"
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M20 12.013L2.211 12m6.776 7L2 12l6.988-7"></path>
            </svg>
            <span class="ml-2">Projects</span>
          </button>
        </div>

        <!-- Project Categories Navigation -->
        <nav class="scrollable-nav py-9">
          <ul class="nav-list font22 flex gap-x-2">
            {
              categories.map((category) => (
                <li
                  class={`nav-item ${category === 'all' ? 'active' : ''} rounded-lg px-6 py-2`}
                  data-filter={category}
                >
                  <a href="#">{formatCategoryName(category)}</a>
                </li>
              ))
            }
          </ul>
        </nav>

        <!-- Project Cards Grid -->
        <div class="project-cards grid h-full w-full grid-cols-2 gap-8 pb-20 sm:gap-10">
          {
            transformedProjects.length > 0 ? (
              transformedProjects.map((project) => (
                <a
                  href={`/project/${project.name.replace(/\s+/g, '-').toLowerCase()}`}
                  class="project-card w-full rounded-xl bg-[#0E3B57]"
                  data-category={project.category}
                >
                  <ImageComp
                    imagePath={project.image}
                    altText={project.name}
                    className="h-44 w-full rounded-xl bg-[#2779ab] object-cover sm:h-48"
                  />
                  <div class="px-8 py-3 sm:px-10 sm:py-5">
                    <h3 class="font26 line-clamp-1 font-semibold">{project.name}</h3>
                    <p class="font15 text-gray-300 pt-2">{project.location}</p>
                  </div>
                </a>
              ))
            ) : (
              <p class="col-span-2 text-center">No projects available</p>
            )
          }
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .about-dropdown {
    max-height: 0;
    opacity: 0;
    overflow: hidden;
    transition:
      max-height 0.6s cubic-bezier(0.4, 0, 0.2, 1),
      opacity 0.6s cubic-bezier(0.4, 0, 0.2, 1),
      padding 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    padding-top: 0;
    padding-bottom: 0;
  }

  .about-dropdown.is-active {
    max-height: 400px;
    opacity: 1;
    padding-top: 4rem;
    padding-bottom: 2rem;
  }

  .scrollable-nav {
    overflow-x: auto;
    white-space: nowrap;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .scrollable-nav::-webkit-scrollbar {
    display: none;
  }

  .nav-list {
    display: inline-flex;
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .nav-item {
    text-decoration: none;
    transition: all 0.3s ease;
  }

  .nav-item.active,
  .nav-item:hover {
    background-color: #0e3b57;
    color: #ffffff;
  }

  .arrow-icon.rotate {
    transform: rotate(180deg);
  }
</style>

<script>
  function setupMobileMenu() {
    // Menu Elements
    const aboutButton = document.querySelector('.about-button');
    const aboutDropdown = document.querySelector('.about-dropdown');
    const aboutText = aboutButton?.querySelector('span');
    const arrowIcon = aboutButton?.querySelector('.arrow-icon');
    const projectsButton = document.querySelector('.projects-button');
    const projectsView = document.querySelector('.projects-view');
    const mainMenu = document.querySelector('.main-menu');
    const backButton = document.querySelector('.back-to-menu');
    const navItems = document.querySelectorAll('.nav-item');
    const projectCards = document.querySelectorAll('.project-card');

    // About Menu Toggle
    if (aboutButton && aboutDropdown && arrowIcon) {
      aboutButton.addEventListener('click', () => {
        aboutDropdown.classList.toggle('is-active');
        aboutText?.classList.toggle('font-semibold');
        arrowIcon.classList.toggle('hidden');
        arrowIcon.classList.toggle('rotate');
      });
    }

    // Projects Menu Navigation
    if (projectsButton && mainMenu && projectsView) {
      projectsButton.addEventListener('click', () => {
        mainMenu.classList.add('hidden');
        projectsView.classList.remove('hidden');
      });
    }

    if (backButton && mainMenu && projectsView) {
      backButton.addEventListener('click', () => {
        projectsView.classList.add('hidden');
        mainMenu.classList.remove('hidden');
      });
    }

    // Project Filtering
    function filterProjects(filter) {
      projectCards.forEach((card) => {
        if (filter === 'all' || card.dataset.category === filter) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    }

    // Category Navigation
    navItems.forEach((item) => {
      item.addEventListener('click', (e) => {
        e.preventDefault();
        navItems.forEach((navItem) => navItem.classList.remove('active'));
        item.classList.add('active');
        const filter = item.dataset.filter;
        filterProjects(filter);
      });
    });

    // Initialize with "All Projects" selected
    filterProjects('all');
  }

  // Run on initial load
  setupMobileMenu();

  // Run after Astro page transitions
  document.addEventListener('astro:after-swap', setupMobileMenu);
</script>

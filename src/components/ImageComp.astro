---
import type { ImageMetadata } from 'astro';
import { Image, Picture } from 'astro:assets';

interface Props {
  imagePath: string | ImageMetadata;
  altText: string;
  className?: string;
  width?: number | string;
  height?: number | string;
  loadingType?: 'lazy' | 'eager';
  fetchpriority?: 'auto' | 'high' | 'low';
  usePicture?: boolean;
}

const {
  imagePath,
  altText = 'default alt text',
  className,
  width,
  height,
  loadingType = 'lazy',
  fetchpriority = 'auto',
  usePicture = false,
} = Astro.props;

function isValidURL(string: string) {
  try {
    new URL(string);
    return true;
  } catch (_) {
    return false;
  }
}

const images = import.meta.glob<{ default: ImageMetadata }>('/src/images/**/*.{svg,jpeg,jpg,png,gif}');

let imageSource: string | ImageMetadata;
if (typeof imagePath === 'string' && isValidURL(imagePath)) {
  imageSource = imagePath;
} else if (typeof imagePath === 'string') {
  if (!images[imagePath]) {
    throw new Error(`"${imagePath}" does not exist in glob: "src/images/**/*.{svg,jpeg,jpg,png,gif}"`);
  }
  imageSource = images[imagePath]();
} else {
  imageSource = imagePath;
}

const commonProps = {
  src: imageSource,
  alt: altText,
  class: className,
  width: width,
  height: height,
  loading: loadingType,
  fetchpriority: fetchpriority,
};

// Define more granular breakpoints
const imageWidths = [240, 540, 768];

// Create a more precise sizes attribute
const sizes = `(max-width: 360px) 240px,
               (max-width: 540px) 540px,
               (max-width: 1024px) 768px,
               1920px`;
---

{
  usePicture ? (
    <Picture {...commonProps} widths={imageWidths} sizes={sizes} formats={['avif']} />
  ) : (
    <Image inferSize={true} format={'avif'} {...commonProps} />
  )
}
